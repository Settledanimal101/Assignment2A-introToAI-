import heapq
import math

def euclidean_distance(node1, node2):
    x1, y1 = coords[node1]
    x2, y2 = coords[node2]
    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)

def gbfs(start, goals):
    visited = set()
    expanded = []
    queue = []

    # 初始状态
    initial_heuristic = min(euclidean_distance(start, g) for g in goals)
    heapq.heappush(queue, (initial_heuristic, start, [start]))

    search_order = []

    while queue:
        heuristic, current, path = heapq.heappop(queue)
        
        if current in visited:
            continue

        visited.add(current)
        expanded.append(current)
        search_order.append(current)

        if current in goals:
            print("GBFS Goal Reached:", current)
            print("Expanded Nodes:", expanded)
            print("Search Order:", search_order)
            print("Path:", path)
            return path

        neighbors = sorted(graph.get(current, []), key=lambda x: x[0])
        for neighbor, _ in neighbors:
            if neighbor not in visited:
                h = min(euclidean_distance(neighbor, g) for g in goals)
                heapq.heappush(queue, (h, neighbor, path + [neighbor]))

    print("GBFS: No path found.")
    return None
